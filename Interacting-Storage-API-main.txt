/*
Last update: 22 March 2021

The main method of the project

Contributing authors: Austin Matias
 */

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {

                                                    /** TESTING
     *
     * public static void testStorageLoadIn(API_Translator _trans, Storage _db)                             //TESTED: WORKED
    {
        In order to test the Storage.
         * I will first request a few Json_object from the API
         * Store it as Article then try to pass it to Storage.
         * This test is going to use mainStorage for testing in/out of the database
         * recommend creating temp db for other method


        System.out.println("Please enter the keyword for the article: Autofilled cat. Autofille dog");

        int result = 0;
        JSONObject articleJson = _trans.sortByKeyword("cat");                                   //01 JSON of cat
        JSONObject articleJson2 = _trans.sortByKeyword("dog");                                  //01 JSON of dog
        System.out.println(articleJson);                                                                //checking total result cat
        System.out.println(articleJson2);                                                               //checking total result dog
        ArrayList<Article> temp = _trans.getArrayListOfArticlesFromJSONObject(articleJson);             //Array Cat
        ArrayList<Article> temp2 = _trans.getArrayListOfArticlesFromJSONObject(articleJson2);           //Array Dog
        System.out.println("Cat actual Stored: " +temp.size() + "\nDog actual Stored:" + temp2.size() + "\nTotal = " + (temp.size()+temp2.size()) + "\n");
        try {

            for (int i = 0; i < temp.size(); i++){
                _db.addArticle(temp.get(i));                                                             //modify db with cat
            };
            for (int j = 0; j < temp2.size(); j++) {
                _db.addArticle(temp2.get(j));                                                            //modify db with dog
            }
            _db.updateStorage();                                                                         //load in
            System.out.println("Loading DB completed.\n Now perform load out");
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("Printing favoritve array:\n Total Article: " + _db.favoriteArray.size());
        System.out.println(_db.favoriteArray);
    }*/

    public static void main(String[] args) throws IOException, JSONException {
        API_Translator translator = new API_Translator();                       // one and only main API_trans
        Storage mainStorage = new Storage();                                    // main Storage that actual link to the local db
        mainStorage.initializeStorage();
        ArrayList<Article> favorites = mainStorage.favoriteArray;               // array contain local db data

                                                    /**TESTING SECTION
        testStorageLoadIn(translator, mainStorage);
        *testClearStorage. Currently having a txt file loaded with articles
        *mainStorage.clearStorage();*/    //Tested: Passed

        appStarted(translator, mainStorage, favorites);
    }

    /**App Starting*/
    public static void appStarted(API_Translator _trans, Storage _mainDB, ArrayList _fav) throws JSONException, IOException {
        System.out.println("Wellcome to the NewsApp!\n Please enter your name:");
        Scanner in = new Scanner(System.in);

        String username = in.nextLine();
        System.out.println("Hello, " + username );                                                                      //load menu opt.
        loadMenu(username);
        String options = in.nextLine();
        boolean state = true;
        while (state)
        {
            if (validSelection(options, 6) == true){
                state = false;
            } else {
                state = true;
            }
        }
        switch (Integer.parseInt(options))
        {
            case 1:
                keywords(_trans);
                System.out.println("Do you want to save this to your favorite list? (Y/N)");
                //still working on this part but i need to look at the GUI first b4 continue
                break;
            case 2:
                dom(_trans);
                break;
            case 3:
                country(_trans);
                break;
            case 4:
                category(_trans);
                break;
            case 5:
                loadLocalFavorite(_fav);
                break;
            case 6:
                exitApp(_mainDB);
            default:
                break;
        }
    }

    /**Main Menu
     * From option 1 - 4 each function return 1 Article Objs
     * option 5 is read pre-saved articles
     * option 6 is close app
     * later will be decided to add on the favorite list by user.*/
    public static void loadMenu(String username) {


        System.out.println( "1, Search for news by keywords\n" +
                            "2, Search for news by website domain\n" +
                            "3, Search for news by country\n" +
                            "4, Search for news by category\n" +
                            "5, Load " + username + "'s favorite news\n" +
                            "6, Exit."
        );

        System.out.println("Please select what you want to do.");                   //show labels for user to click on
        //NOTE: need labels from Connor
    }

    /**Selection no.1: Search by keyword*/
    public static Article keywords(API_Translator _trans) throws JSONException {
        Article retKeyArticle;
        Scanner keySc = new Scanner(System.in);
        System.out.println("\nPlease enter your keywords: ");                                                           //input box by GUI needed
        String keyword = keySc.nextLine();
        JSONObject jsonForm = _trans.sortByKeyword(keyword);                                                            //Getting Json
            if (jsonForm.getInt("totalResults") == 0)
            {                                         //zero result case
                System.out.println("Sorry, no article has been found please try again!");
                retKeyArticle = keywords(_trans);
            }
            else
            {
                ArrayList<Article> temp = _trans.getArrayListOfArticlesFromJSONObject(jsonForm);                        //store the whole json into an arrayList
                for (int i = 0; i < temp.size(); i++) {
                    String printStr = temp.get(i).toString();
                    System.out.println(i + " " + printStr);                                                             //print article with article number at the start for selection
                }
                System.out.println("Please select the article you like by entering its number (index)");
                String articleNum = keySc.nextLine();                                                                       //getting user selection of article
                retKeyArticle = _trans.getSpecificArticleFromJSON(jsonForm, Integer.parseInt(articleNum));
            }
        return retKeyArticle;
    }
    /**Selection no.2: Search by domain*/
    public static Article dom(API_Translator _trans) throws JSONException {
        Article retDomArticle;
        Scanner domSc = new Scanner(System.in);
        System.out.println("\nPlease enter your domain: ");                                                             //input box by GUI needed
        String dom = domSc.nextLine();
        JSONObject jsonForm = _trans.sortByDom(dom);
        if (jsonForm.getInt("totalResults") == 0)                                                                   //zero result case
        {
            System.out.println("Sorry, no article from given domain has been found please try again!");
            retDomArticle = dom(_trans);
        }
        else
        {
            ArrayList<Article> temp = _trans.getArrayListOfArticlesFromJSONObject(jsonForm);                            //store the whole json into an arrayList
            for (int i = 0; i < temp.size(); i++) {
                String printStr = temp.get(i).toString();
                System.out.println(i + " " + printStr);                                                                 //print article with article number at the start for selection
            }
            System.out.println("Please select the article you like by entering its number (index)");
            String articleNum = domSc.nextLine();                                                                           //getting user selection of article
            retDomArticle = _trans.getSpecificArticleFromJSON(jsonForm, Integer.parseInt(articleNum));
        }
        return retDomArticle;
    }
    /**Selection no.3: Search by country*/
    public static Article country(API_Translator _trans) {
        JSONObject jsonForm;
        Article retArticle;
        //possible country tags not yet implemented
        String countries =  "\n ae  - ar  - at  - au  - be  - bg  - br  - ca  - ch  - cn  " +
                            "\n co  - cu  - cz  - de  - eg  - fr  - gb  - gr  - hk  - hu " +
                            "\n id  - ie  - il  - in  - it  - jp  - kr  - lt  - lv  - ma  " +
                            "\n mx  - my  - ng  - nl  - no  - nz  - ph  - pl  - pt  - ro  " +
                            "\n rs  - ru  - sa  - se  - sg  - si  - sk - th  - tr  - tw  " +
                            "\n ua  - us  - ve  - za";                                          //54 countries
        System.out.println("\nList of available country: " + countries);
        // maybe needed this much labels for all of these countries - Connor please explain your GUI so I can help you a hand on building these amount of labels
        Scanner countrySc = new Scanner(System.in);
        System.out.println("\nPlease enter the country you'd like!");                           //input box by GUI needed
        String country = countrySc.nextLine();
        if (countries.contains(country) == false)                                               //valid country fail check
        {
            System.out.println("Your input is invalid!\nPlease try again!");
            retArticle = country(_trans);
        }
        else {                                                                                  //valid input accepted
            jsonForm = _trans.sortByCountry(country);
            ArrayList<Article> temp = _trans.getArrayListOfArticlesFromJSONObject(jsonForm);    //store the whole json into an arrayList
            for (int i = 0; i < temp.size(); i++)
            {
                String printStr = temp.get(i).toString();
                System.out.println(i + " " + printStr);                                          //print article with article number at the start
            }
            System.out.println("Please select the article you like by entering its number (index)");
            String articleNum = countrySc.nextLine();                                                //getting user selection of article
            retArticle = _trans.getSpecificArticleFromJSON(jsonForm, Integer.parseInt(articleNum));
        }
        return retArticle;
    }
    /**Selection no.4: Search by category*/
    public static Article category(API_Translator _trans) {
        JSONObject cateJsonForm;
        Article retCateArticle;
        //possible category tags not yet implemented
        String categories = "business - entertainment - general - health - science - sports - technology";
        Scanner cateSc = new Scanner(System.in);
        System.out.println("\nPlease enter the category you'd like!");                             //input box by GUI needed
        String category = cateSc.nextLine();
        if (categories.contains(category) == false)                                                //valid category fail check
        {
            System.out.println("Your input is invalid!\nPlease try again!");
            retCateArticle = country(_trans);
        }
        else {                                                                                      //valid input accepted
            cateJsonForm = _trans.sortByCategory(category);
            ArrayList<Article> temp = _trans.getArrayListOfArticlesFromJSONObject(cateJsonForm);    //store the whole json into an arrayList
            for (int i = 0; i < temp.size(); i++)
            {
                String printStr = temp.get(i).toString();
                System.out.println(i + " " + printStr);                                             //print article with article number at the start for selection
            }
            System.out.println("Please select the article you like by entering its number (index)");
            String articleNum = cateSc.nextLine();                                                      //getting user selection of article
            retCateArticle = _trans.getSpecificArticleFromJSON(cateJsonForm, Integer.parseInt(articleNum));
        }
        return retCateArticle;
    }

    /**Selection no.5: Load pre-saved user's favorite article*/
    public static void loadLocalFavorite(ArrayList _fav) {
        /**I need Connor GUI to create a view for each article.
         * also we can go to next article by a forward/backward button*/
        System.out.println("\t\tUser favorite article");
        for (int i = 0; i < _fav.size(); i++)
        {
            System.out.println("Article #" + i + ":\n" + _fav.get(i));
        }
    }

    /**Selection no.6: Exit (Update local storage and close app)*/
    public static void exitApp(Storage _db) throws IOException {
        _db.updateStorage();
        System.out.println("Thank you for choosing NewsApp\nSee you later!");
        System.exit(0);
    }

    /**Support methods*/
    public static boolean validSelection(String options, int condition)
    {

        if (Integer.parseInt(options) > condition)
        {
            System.out.println("Invalid selection. Please try again");
            return false;
        }
        else
            return true;
    }

}

